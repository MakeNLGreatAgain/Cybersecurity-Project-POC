# -*- coding: utf-8 -*-
"""build_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l_fBqg1A0Pr4TstlfaFLtP4Q2iBQHWjn
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/MakeNLGreatAgain/Cybersecurity-Project-POC.git
# %cd /content/Cybersecurity-Project-POC

!pip install -r requirements.txt

from data.fetch_epss import fetch_epss
from data.fetch_nvd import fetch_nvd
from data.fetch_kev import fetch_kev

import pandas as pd
from pathlib import Path

def main():
    try:
        ROOT = Path(__file__).resolve().parent
    except NameError:
        ROOT = Path.cwd()

    CSV_EPSS = ROOT / "epss_raw.csv"
    CSV_NVD = ROOT / "nvd_raw.csv"
    CSV_KEV = ROOT / "kev_raw.csv"
    OUT = ROOT / "dataset_ready.csv"

    print("Fetching EPS Score...")
    epss_df = fetch_epss()
    epss_df.to_csv(CSV_EPSS, index=False)
    print(f"Saved EPS Score to {CSV_EPSS}")

    print("Fetching NVD data...")
    nvd_df = fetch_nvd(days=90)
    nvd_df.to_csv(CSV_NVD, index=False)
    print(f"Saved NVD data to {CSV_NVD}")

    print("Fetching KEV list...")
    kev_df = fetch_kev()
    kev_df.to_csv(CSV_KEV, index=False)
    print(f"Saved KEV list to {CSV_KEV}")

    print("Processing and merging datasets...")
    epss = pd.read_csv(CSV_EPSS)
    nvd = pd.read_csv(CSV_NVD, parse_dates=["published_date"], infer_datetime_format=True)
    kev = pd.read_csv(CSV_KEV)

    df = nvd.merge(epss, on="cve_id", how="inner").drop_duplicates("cve_id")
    cutoff = pd.Timestamp.today() - pd.Timedelta(days=90)
    df = df[df["published_date"] >= cutoff]
    df["label_exploited"] = df["cve_id"].isin(set(kev["cve_id"])).astype(int)
    df["cvss_norm"] = df["cvss_score"] / 10.0
    df["risk_baseline"] = 0.5 * df["cvss_norm"] + 0.5 * df["epss_score"]

    cols = ["cve_id", "cvss_score", "epss_score", "published_date", "label_exploited", "risk_baseline"]
    df[cols].to_csv(OUT, index=False)
    print(f"\nâœ… Saved merged dataset to {OUT}, rows: {len(df)}")

if __name__ == "__main__":
    main()